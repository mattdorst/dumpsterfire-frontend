{"ast":null,"code":"var _jsxFileName = \"/Users/matt/Projects/sushiswap-frontend/src/components/Value/Value.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport CountUp from 'react-countup';\nimport styled from 'styled-components';\n\nconst Value = ({\n  value,\n  decimals\n}) => {\n  const [start, updateStart] = useState(0);\n  const [end, updateEnd] = useState(0);\n  useEffect(() => {\n    if (typeof value === 'number') {\n      updateStart(end);\n      updateEnd(value);\n    }\n  }, [value]);\n  return /*#__PURE__*/React.createElement(StyledValue, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, typeof value == 'string' ? value : /*#__PURE__*/React.createElement(CountUp, {\n    start: start,\n    end: end,\n    decimals: decimals !== undefined ? decimals : end < 0 ? 4 : end > 1e5 ? 0 : 3,\n    duration: 1,\n    separator: \",\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst StyledValue = styled.div`\n  font-family: 'Roboto Mono', monospace;\n  // color: ${props => props.theme.color.grey[600]};\n  color: #fff;\n  font-size: 36px;\n  font-weight: 700;\n`;\nexport default Value;","map":{"version":3,"sources":["/Users/matt/Projects/sushiswap-frontend/src/components/Value/Value.tsx"],"names":["React","useState","useEffect","CountUp","styled","Value","value","decimals","start","updateStart","end","updateEnd","undefined","StyledValue","div","props","theme","color","grey"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,eAApB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;;AAOA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB;AAC3D,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBR,QAAQ,CAAC,CAAD,CAArC;AACA,QAAM,CAACS,GAAD,EAAMC,SAAN,IAAmBV,QAAQ,CAAC,CAAD,CAAjC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,OAAOI,KAAP,KAAiB,QAArB,EAA+B;AAC7BG,MAAAA,WAAW,CAACC,GAAD,CAAX;AACAC,MAAAA,SAAS,CAACL,KAAD,CAAT;AACD;AACF,GALQ,EAKN,CAACA,KAAD,CALM,CAAT;AAOA,sBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,OAAOA,KAAP,IAAgB,QAAhB,GACCA,KADD,gBAGC,oBAAC,OAAD;AACE,IAAA,KAAK,EAAEE,KADT;AAEE,IAAA,GAAG,EAAEE,GAFP;AAGE,IAAA,QAAQ,EACNH,QAAQ,KAAKK,SAAb,GAAyBL,QAAzB,GAAoCG,GAAG,GAAG,CAAN,GAAU,CAAV,GAAcA,GAAG,GAAG,GAAN,GAAY,CAAZ,GAAgB,CAJtE;AAME,IAAA,QAAQ,EAAE,CANZ;AAOE,IAAA,SAAS,EAAC,GAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADF;AAiBD,CA5BD;;AA8BA,MAAMG,WAAW,GAAGT,MAAM,CAACU,GAAI;;cAEhBC,KAAD,IAAWA,KAAK,CAACC,KAAN,CAAYC,KAAZ,CAAkBC,IAAlB,CAAuB,GAAvB,CAA4B;;;;CAFrD;AAQA,eAAeb,KAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport CountUp from 'react-countup'\n\nimport styled from 'styled-components'\n\ninterface ValueProps {\n  value: string | number\n  decimals?: number\n}\n\nconst Value: React.FC<ValueProps> = ({ value, decimals }) => {\n  const [start, updateStart] = useState(0)\n  const [end, updateEnd] = useState(0)\n\n  useEffect(() => {\n    if (typeof value === 'number') {\n      updateStart(end)\n      updateEnd(value)\n    }\n  }, [value])\n\n  return (\n    <StyledValue>\n      {typeof value == 'string' ? (\n        value\n      ) : (\n        <CountUp\n          start={start}\n          end={end}\n          decimals={\n            decimals !== undefined ? decimals : end < 0 ? 4 : end > 1e5 ? 0 : 3\n          }\n          duration={1}\n          separator=\",\"\n        />\n      )}\n    </StyledValue>\n  )\n}\n\nconst StyledValue = styled.div`\n  font-family: 'Roboto Mono', monospace;\n  // color: ${(props) => props.theme.color.grey[600]};\n  color: #fff;\n  font-size: 36px;\n  font-weight: 700;\n`\n\nexport default Value\n"]},"metadata":{},"sourceType":"module"}