{"ast":null,"code":"import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport { Contracts } from './lib/contracts.js';\nimport { Account } from './lib/accounts.js';\nimport { EVM } from './lib/evm.js';\nimport { contractAddresses } from './lib/constants';\nexport class Sushi {\n  constructor(provider, networkId, testing, options) {\n    var realProvider;\n\n    if (typeof provider === 'string') {\n      if (provider.includes('wss')) {\n        realProvider = new Web3.providers.WebsocketProvider(provider, options.ethereumNodeTimeout || 10000);\n      } else {\n        realProvider = new Web3.providers.HttpProvider(provider, options.ethereumNodeTimeout || 10000);\n      }\n    } else {\n      realProvider = provider;\n    }\n\n    this.web3 = new Web3(realProvider);\n\n    if (testing) {\n      this.testing = new EVM(realProvider);\n      this.snapshot = this.testing.snapshot();\n    }\n\n    if (options.defaultAccount) {\n      this.web3.eth.defaultAccount = options.defaultAccount;\n    }\n\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options);\n    this.sushiAddress = contractAddresses.sushi[networkId];\n    this.masterChefAddress = contractAddresses.masterChef[networkId];\n    this.wethAddress = contractAddresses.weth[networkId];\n  }\n\n  async resetEVM() {\n    this.testing.resetEVM(this.snapshot);\n  }\n\n  addAccount(address, number) {\n    this.accounts.push(new Account(this.contracts, address, number));\n  }\n\n  setProvider(provider, networkId) {\n    this.web3.setProvider(provider);\n    this.contracts.setProvider(provider, networkId);\n    this.operation.setNetworkId(networkId);\n  }\n\n  setDefaultAccount(account) {\n    this.web3.eth.defaultAccount = account;\n    this.contracts.setDefaultAccount(account);\n  }\n\n  getDefaultAccount() {\n    return this.web3.eth.defaultAccount;\n  }\n\n  loadAccount(account) {\n    const newAccount = this.web3.eth.accounts.wallet.add(account.privateKey);\n\n    if (!newAccount || account.address && account.address.toLowerCase() !== newAccount.address.toLowerCase()) {\n      throw new Error(`Loaded account address mismatch.\n        Expected ${account.address}, got ${newAccount ? newAccount.address : null}`);\n    }\n  }\n\n  toBigN(a) {\n    return BigNumber(a);\n  }\n\n}","map":{"version":3,"sources":["/Users/matt/Projects/sushiswap-frontend/src/sushi/Sushi.js"],"names":["Web3","BigNumber","Contracts","Account","EVM","contractAddresses","Sushi","constructor","provider","networkId","testing","options","realProvider","includes","providers","WebsocketProvider","ethereumNodeTimeout","HttpProvider","web3","snapshot","defaultAccount","eth","contracts","sushiAddress","sushi","masterChefAddress","masterChef","wethAddress","weth","resetEVM","addAccount","address","number","accounts","push","setProvider","operation","setNetworkId","setDefaultAccount","account","getDefaultAccount","loadAccount","newAccount","wallet","add","privateKey","toLowerCase","Error","toBigN","a"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\nimport BigNumber from 'bignumber.js'\nimport { Contracts } from './lib/contracts.js'\nimport { Account } from './lib/accounts.js'\nimport { EVM } from './lib/evm.js'\n\nimport { contractAddresses } from './lib/constants'\n\nexport class Sushi {\n  constructor(provider, networkId, testing, options) {\n    var realProvider\n\n    if (typeof provider === 'string') {\n      if (provider.includes('wss')) {\n        realProvider = new Web3.providers.WebsocketProvider(\n          provider,\n          options.ethereumNodeTimeout || 10000,\n        )\n      } else {\n        realProvider = new Web3.providers.HttpProvider(\n          provider,\n          options.ethereumNodeTimeout || 10000,\n        )\n      }\n    } else {\n      realProvider = provider\n    }\n\n    this.web3 = new Web3(realProvider)\n\n    if (testing) {\n      this.testing = new EVM(realProvider)\n      this.snapshot = this.testing.snapshot()\n    }\n\n    if (options.defaultAccount) {\n      this.web3.eth.defaultAccount = options.defaultAccount\n    }\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options)\n    this.sushiAddress = contractAddresses.sushi[networkId]\n    this.masterChefAddress = contractAddresses.masterChef[networkId]\n    this.wethAddress = contractAddresses.weth[networkId]\n  }\n\n  async resetEVM() {\n    this.testing.resetEVM(this.snapshot)\n  }\n\n  addAccount(address, number) {\n    this.accounts.push(new Account(this.contracts, address, number))\n  }\n\n  setProvider(provider, networkId) {\n    this.web3.setProvider(provider)\n    this.contracts.setProvider(provider, networkId)\n    this.operation.setNetworkId(networkId)\n  }\n\n  setDefaultAccount(account) {\n    this.web3.eth.defaultAccount = account\n    this.contracts.setDefaultAccount(account)\n  }\n\n  getDefaultAccount() {\n    return this.web3.eth.defaultAccount\n  }\n\n  loadAccount(account) {\n    const newAccount = this.web3.eth.accounts.wallet.add(account.privateKey)\n\n    if (\n      !newAccount ||\n      (account.address &&\n        account.address.toLowerCase() !== newAccount.address.toLowerCase())\n    ) {\n      throw new Error(`Loaded account address mismatch.\n        Expected ${account.address}, got ${\n        newAccount ? newAccount.address : null\n      }`)\n    }\n  }\n\n  toBigN(a) {\n    return BigNumber(a)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}